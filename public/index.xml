<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hi, I’m Alex</title>
    <link>/</link>
    <description>Recent content on Hi, I’m Alex</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Alexey Shtanko</copyright>
    <lastBuildDate>Sat, 06 Jun 2020 09:00:00 +0000</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Changes to String in java (from 1.7.0_06)</title>
      <link>/posts/2020-06-06-changes-in-java-string/</link>
      <pubDate>Sat, 06 Jun 2020 09:00:00 +0000</pubDate>
      
      <guid>/posts/2020-06-06-changes-in-java-string/</guid>
      <description>Before 1.7.0_06, String has 4 non static field:
 char[] value int[] offset int count int hash  Subing.substring create a String by sharing the original String&amp;rsquo;s internal char[] value and setting offset. This saves memory and makes String.substring run in a constant time($O(1)$). Meanwhile, this feature may cause memory leak1.
http://hg.openjdk.java.net/jdk6/jdk6/jdk/file/8deef18bb749/src/share/classes/java/lang/String.java
public final class String implements java.io.Serializable, Comparable&amp;lt;String&amp;gt;, CharSequence { /** The value is used for character storage. */ private final char value[]; /** The offset is the first index of the storage that is used.</description>
    </item>
    
    <item>
      <title>Algorithms - Graphs</title>
      <link>/posts/2020-05-01-algorithms-graphs/</link>
      <pubDate>Fri, 01 May 2020 09:00:00 +0000</pubDate>
      
      <guid>/posts/2020-05-01-algorithms-graphs/</guid>
      <description>Undirected Graphs Some problems  Path Shortest path Cycle Ehler tour: A cycle that uses each edge excatly once. Hamilton tour: A cycle that uses each vertex exactly once  classical NP-complete problem.   Connectivity MST: Biconnectivity: A vertex whose removal disconnects the graph Planarity Graph isomorphism: Are two graphs identical?  No one knows so far. A lonstanding open problem    Representations Real-world graphs tend to be sparse (huge number of vertices, small average vertex degree).</description>
    </item>
    
    <item>
      <title>Programming Language - Subtyping</title>
      <link>/posts/2020-04-29-subtyping/</link>
      <pubDate>Wed, 29 Apr 2020 09:00:00 +0000</pubDate>
      
      <guid>/posts/2020-04-29-subtyping/</guid>
      <description>Some Good Subtyping Rules  Width subtyping: A supertype can have a subset of fields with the same types, i.e., a subtype can have extra fields. Permutation subtypings: A supertype can have the same set of fields with the same types in a different order. Transitivity: if t1 is subtype of t2, and t2 is subtype of t3, then t1 is subtype of t3. Reflexivity: Every type is a subtype of itself.</description>
    </item>
    
    <item>
      <title>Racket notes</title>
      <link>/posts/2020-02-29-racket/</link>
      <pubDate>Sat, 29 Feb 2020 09:00:00 +0000</pubDate>
      
      <guid>/posts/2020-02-29-racket/</guid>
      <description>Basic #lang Kotlin fun perform(n: Int, edges: List&amp;lt;List&amp;lt;Int&amp;gt;&amp;gt;): List&amp;lt;Int&amp;gt; { val res: MutableList&amp;lt;Int&amp;gt; = ArrayList() val seen = BooleanArray(n) for (edge in edges) { seen[edge[1]] = true } for (i in 0 until n) { if (!seen[i]) { res.add(i) } } return res } List  Empty list: null  () doesn&amp;quot;t work for null but &#39;() does   build a list: (list e1 ... en) Constructor: cons Access head of list: car Access tail of list: cdr Check for empty: null?</description>
    </item>
    
    <item>
      <title>About me</title>
      <link>/about/</link>
      <pubDate>Wed, 24 Aug 2016 17:51:42 +0000</pubDate>
      
      <guid>/about/</guid>
      <description> Github: ashtanko Resume: pdf  </description>
    </item>
    
  </channel>
</rss>
